/**
 * @file Input.lf
 * @author Vincenzo Barbuto
 * @author Edward A. Lee
 * @brief Interface library for input devices such as microphones, cameras, and other sensors.
 */
target Python {
  files: ["../../util/VideoCapture.py"]
}

/**
 * @brief The `Microphone` reactor manages audio capture using an input stream and transitions 
 * between On and Off states based on input signals and startup configuration.
 * 
 * This reactor uses the `sounddevice` library to capture audio data from a microphone, emitting the 
 * captured data through the `audio_data` output. It supports configurable parameters such as sample 
 * rate, buffer size, and data type.
 * 
 * Args:
 *  - `buffer_size` (int): The size of the audio buffer in samples. Defaults to 15600.
 *  - `sample_rate` (int): The sample rate of the audio input in Hz. Defaults to 16000.
 *  - `channels` (int): The number of audio channels. Defaults to 1 (mono).
 *  - `on_at_startup` (bool): If true, the reactor starts in the On mode. Defaults to true.
 *  - `device` (optional): The ID or name of the audio input device. Defaults to `None`, which uses the 
 *                         default system device.
 *  - `dtype` (optional): The data type for audio samples. Defaults to `None`.
 *  - `debug` (bool): Enables debug logging for operations. Defaults to false.
 * 
 * Inputs:
 *  - `turn_off`: A signal to transition the reactor from On to Off mode.
 *  - `turn_on`: A signal to transition the reactor from Off to On mode.
 * 
 * Outputs:
 *  - `audio_data`: The captured audio data emitted as an output.
 * 
 * Modes:
 *  - `Off`: The inactive state where the microphone is not capturing audio.
 *  - `On`: The active state where the microphone captures audio and emits it through `audio_data`.
 * 
 * Reactions:
 *  - Off:
 *    - `startup`: Checks the `on_at_startup` flag and transitions to the On mode if true. Logs the 
 *                 transition in debug mode.
 *    - `reset`: Stops the audio stream and logs the microphone shutdown in debug mode.
 *    - `turn_on`: Logs the activation event in debug mode and transitions to the On mode.
 *    - `shutdown`: Logs the shutdown event in debug mode.
 *  - On:
 *    - `reset`: Initializes the audio input stream with the specified parameters, including buffer 
 *               size, sample rate, channels, and device. Registers a callback to schedule captured 
 *               audio data. Starts the stream and logs the event in debug mode.
 *    - `send_audio_data`: Transfers the captured audio data from the physical action to the 
 *                         `audio_data` output.
 *    - `turn_off`: Stops the audio stream, logs the event in debug mode, and transitions to the Off mode.
 *    - `shutdown`: Stops the audio stream and logs the shutdown event in debug mode.
 * 
 * Notes:
 *  - The reactor ensures proper resource cleanup by stopping the audio stream during transitions and 
 *    shutdown.
 */
reactor Microphone(
    buffer_size=15600,
    sample_rate=16000,
    channels=1,
    active_at_startup=True,
    device = {= None =},
    dtype = {= None =},
    debug=False) {
  input turn_off
  input turn_on
  output audio_data

  preamble {=
    import sounddevice as sd
    import numpy as np
    import threading
    import queue
  =}

  initial mode Idle {
    reaction(startup) -> reset(Active) {=
      if self.active_at_startup:
        self.debug and print("[MICROPHONE] Turning on Microphone")
        Active.set()
    =}

    reaction(reset) {=
      if self.stream:
        self.stream.stop()
        self.debug and print("[MICROPHONE] Microphone is off")
    =}

    reaction(turn_on) -> reset(Active) {=
      self.debug and print("[MICROPHONE] Turning on Microphone")
      Active.set()
    =}

    reaction(shutdown) {=
      self.debug and print("[MICROPHONE] Shutting down Microphone reactor")
    =}
  }

  mode Active {
    physical action send_audio_data
    reaction(reset) -> send_audio_data {=
      def callback(indata, frames, time, status):
        if status:
          self.debug and print(f"[MICROPHONE] Audio sample status: {status}")
        if self.dtype is not None:
          indata = indata.astype(self.dtype)
        send_audio_data.schedule(0, indata)

      self.stream = self.sd.InputStream(
        channels=self.channels,
        samplerate=self.sample_rate,
        blocksize=self.buffer_size,
        callback=callback,
        dtype=self.dtype,
        device=self.device)
      self.stream.start()
      self.debug and print("[MICROPHONE] Recording...")
    =}

    reaction(send_audio_data) -> audio_data {=
      audio_data.set(send_audio_data.value)
    =}

    reaction(turn_off) -> reset(Idle) {=
      self.debug and print("[MICROPHONE] Turning off Microphone reactor")
      Idle.set()
    =}

    reaction(shutdown) {=
      self.debug and print("[MICROPHONE] Shutting down Microphone reactor")
      if self.stream:
        self.stream.stop()
    =}
  }
}

/**
 * @brief The `Camera` reactor manages a camera's operation, enabling frame capture and transitions 
 * between Idle and Active states based on input triggers and power signals.
 * 
 * This reactor utilizes the `VideoCapture` class to interface with the camera device, capturing frames 
 * and emitting them through the `camera_frame` output. Logical actions and reactions handle state 
 * transitions and ensure proper camera initialization and cleanup.
 * 
 * Args:
 *  - `camera_id` (int): The ID of the camera device to use. Defaults to 0.
 *  - `active_at_startup` (bool): If true, the reactor starts in the Active mode. Defaults to true.
 *  - `sampling_interval` (time): The time interval in nanoseconds between frame captures. Defaults to 0, using the 
 *                    camera's FPS-derived period if not set.
 *  - `debug` (bool): Enables debug logging for operations. Defaults to false.
 *  - `fast` (bool): If true, the camera uses a fast capture mode (external trigger) to capture frames. Defaults to false.
 * 
 * Inputs:
 *  - `trigger`: A signal to capture a frame in the Active mode or to transition from Idle to Active mode.
 *  - `low_power`: A signal to transition the reactor from Active to Idle mode.
 * 
 * Outputs:
 *  - `camera_frame`: The captured video frame emitted as an output.
 * 
 * States:
 *  - `capture`: Holds the camera resource for frame capture.
 *  - `period`: Holds the capture period in nanoseconds, derived either from the camera's FPSor the specified `sampling_interval`.
 * 
 * Modes:
 *  - `Idle`: The inactive state where the camera is powered down. 
 *  - `Active`: The active state where the camera captures frames at the specified or FPS-derived period.
 * 
 * Reactions:
 *  - Idle:
 *    - `startup`: Initializes the camera device and checks if it is operational. Adjusts the frame 
 *                 capture period based on the specified `period` or the camera's FPS. Checks the 
 *                 `active_at_startup` flag and transitions to the Active mode if true. Logs th 
 *                 transition in debug mode.
 *    - `reset`: Releases the camera resource.
 *    - `trigger`: Logs the activation event in debug mode and transitions to Active mode.
 *  - Active:
 *    - `reset`: Schedules the first frame capture.
 *    - `trigger`: Immediately schedules a frame capture.
 *    - `capture_frame`: Reads a frame from the camera and emits it through the `camera_frame` output. 
 *                       Schedules the next frame capture if `period > 0`.
 *    - `low_power`: Logs the transition to Idle mode in debug mode, releases the camera resource, and 
 *                   transitions to Idle mode.
 *    - `shutdown`: Releases the camera resource during reactor shutdown.
 * 
 * Notes:
 *  - If the specified `period` is less than the camera's FPS-derived interval, the reactor uses the FPS 
 *    value for smooth operation.
 *  - Proper resource cleanup is ensured when transitioning between modes or during shutdown.
 */
reactor Camera(camera_id=0, sampling_interval = 0, active_at_startup=True, debug=False, fast = False) {
  input trigger
  input low_power
  output camera_frame

  state capture
  state period = 0
  state fast_mode = False

  preamble {=
    import sys
    from VideoCapture import VideoCapture

    NSEC = 1000000000

    def get_camera_period(self):
      return int((1 / self.capture.get_fps()) * self.NSEC)
  =}

  initial mode Idle {
    reaction(startup) -> reset(Active) {=
      self.capture = self.VideoCapture(self.camera_id)

      if not self.capture.is_opened():
        self.sys.stderr.write("[CAMERA] *** Error: Failed to open the camera. ***\n")
        lf.request_stop()

      # Check the FPS of the camera.
      camera_period = NSEC(self.get_camera_period())

      # Check if sampling interval is not set when fast is enabled.
      # If sampling interval is set, fast mode is disabled.
      self.fast_mode = self.fast and self.sampling_interval <= 0

      # Adjust the period based on the camera's FPS if necessary.
      self.period = (
          camera_period if (self.sampling_interval <= 0 or self.sampling_interval < camera_period) and not self.fast_mode
          else self.sampling_interval
      )

      if self.sampling_interval <= 0:
        self.debug and print(f"[CAMERA] FPS set to: {self.capture.get_fps()}, Period set to: {self.period}")
      elif self.sampling_interval < camera_period:
        self.debug and print(f"[CAMERA] Warning: Sampling interval is less than camera's FPS. Period set to: {self.period}")

      if self.active_at_startup:
        Active.set()
        self.debug and print("[CAMERA] Switching to Active mode...")
    =}

    reaction(trigger) -> reset(Active) {=
      self.debug and print("[CAMERA] Switching to Active mode...")
      Active.set()
    =}
    reaction(shutdown) {=
      self.capture.release()
    =}
  }

  mode Active {
    logical action capture_frame
    reaction(reset) -> capture_frame {=
      # Schedule the first frame capture to occur after the cameraâ€™s boot-up delay
      capture_frame.schedule(0)
    =}

    reaction(trigger) -> capture_frame {=
      if self.fast_mode:
        capture_frame.schedule(0)
    =}

    reaction(capture_frame) -> camera_frame, capture_frame {=
      # Read a frame
      frame = self.capture.read()
      camera_frame.set(frame)
      if self.period > 0:
        capture_frame.schedule(self.period)
    =}

    reaction(low_power) -> reset(Idle) {=
      self.debug and print("[CAMERA] Switching to idle mode...")
      Idle.set()
    =}

    reaction(shutdown) {=
      self.capture.release()
    =}
  }
}